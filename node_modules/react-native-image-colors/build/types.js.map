{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["export interface AndroidImageColors {\n  dominant: string\n  average: string\n  vibrant: string\n  darkVibrant: string\n  lightVibrant: string\n  darkMuted: string\n  lightMuted: string\n  muted: string\n  platform: 'android'\n}\n\nexport interface WebImageColors {\n  dominant: string\n  vibrant: string\n  darkVibrant: string\n  lightVibrant: string\n  darkMuted: string\n  lightMuted: string\n  muted: string\n  platform: 'web'\n}\n\nexport interface IOSImageColors {\n  background: string\n  primary: string\n  secondary: string\n  detail: string\n  quality: Config['quality']\n  platform: 'ios'\n}\n\nexport interface Config {\n  /**\n   * @description Color used when getting color fails. Must be hex\n   * @default '#000000'\n   */\n  fallback: string\n  /**\n   * @description Android only - The number of pixels to skip between each pixel when\n   * calculating the average color. Lower numbers give better results, but take longer.\n   * @platform android\n   */\n  pixelSpacing: number\n  /**\n   * @default 'low'\n   * @description IOS, Web only - The quality of the image to use when getting colors.\n   * Lowest give the best performance, highest give the best results\n   * @platform ios, web\n   */\n  quality: 'lowest' | 'low' | 'high' | 'highest'\n  /**\n   * @description iOS, Android only - Additional headers to send when downloading the image.\n   * @platform mobile\n   */\n  headers: Record<string, string>\n  /**\n   * Enables in-memory caching of the result - skip downloading the same image next time.\n   */\n  cache: boolean\n  /**\n   * Key used for caching, it is recommended to provide it. If not provided, the image URI will be used.\n   * If the image URI is longer than 500 characters, you must provide a key.\n   */\n  key: string\n}\n\nexport type ImageColorsResult =\n  | AndroidImageColors\n  | IOSImageColors\n  | WebImageColors\n"]}