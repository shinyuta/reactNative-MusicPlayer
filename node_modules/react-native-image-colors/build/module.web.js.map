{"version":3,"file":"module.web.js","sourceRoot":"","sources":["../src/module.web.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,cAAc,CAAA;AAKlC,MAAM,UAAU,GAAG,CAAC,OAA0B,EAAU,EAAE;IACxD,QAAQ,OAAO,EAAE;QACf,KAAK,QAAQ;YACX,OAAO,EAAE,CAAA;QACX,KAAK,KAAK;YACR,OAAO,CAAC,CAAA;QACV,KAAK,MAAM;YACT,OAAO,KAAK,CAAA;QACd,KAAK,SAAS;YACZ,OAAO,CAAC,CAAA;QACV;YACE,OAAO,UAAU,CAAC,KAAK,CAAC,CAAA;KAC3B;AACH,CAAC,CAAA;AAED,MAAM,iBAAiB,GAAG,CAAC,OAAgB,EAAE,EAAE;IAC7C,IAAI,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;IACzB,MAAM,iBAAiB,GAAG,CAAC,CAAC,CAAA;IAE5B,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAEjC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QAChD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAA;QACvB,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAA;QAE3B,IAAI,MAAM,IAAI,MAAM,EAAE,UAAU,GAAG,iBAAiB,EAAE;YACpD,QAAQ,GAAG,MAAM,CAAA;SAClB;KACF;IAED,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAED,eAAe;IACb,SAAS,EAAE,KAAK,EAAE,GAAW,EAAE,MAAc,EAA2B,EAAE;QACxE,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAA;QAE3B,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAA;QACvB,GAAG,CAAC,GAAG,GAAG,GAAG,CAAA;QACb,GAAG,CAAC,WAAW,GAAG,WAAW,CAAA;QAE7B,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE;YAC/B,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC;SACpC,CAAC,CAAA;QAEF,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;QAE1C,OAAO;YACL,QAAQ,EAAE,iBAAiB,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,QAAQ;YACrD,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,QAAQ;YACzC,WAAW,EAAE,OAAO,CAAC,WAAW,EAAE,GAAG,IAAI,QAAQ;YACjD,YAAY,EAAE,OAAO,CAAC,YAAY,EAAE,GAAG,IAAI,QAAQ;YACnD,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,GAAG,IAAI,QAAQ;YAC7C,UAAU,EAAE,OAAO,CAAC,UAAU,EAAE,GAAG,IAAI,QAAQ;YAC/C,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,GAAG,IAAI,QAAQ;YACrC,QAAQ,EAAE,KAAK;SAChB,CAAA;IACH,CAAC;CACF,CAAA","sourcesContent":["import Vibrant from 'node-vibrant'\nimport { Palette } from 'node-vibrant/lib/color'\n\nimport type { Config, WebImageColors } from './types'\n\nconst getQuality = (quality: Config['quality']): number => {\n  switch (quality) {\n    case 'lowest':\n      return 10\n    case 'low':\n      return 5\n    case 'high':\n      return 1.333\n    case 'highest':\n      return 1\n    default:\n      return getQuality('low')\n  }\n}\n\nconst getDominantSwatch = (palette: Palette) => {\n  let dominant = palette[0]\n  const highestPopulation = -1\n\n  const keys = Object.keys(palette)\n\n  for (let index = 0; index < keys.length; index++) {\n    const key = keys[index]\n    const swatch = palette[key]\n\n    if (swatch && swatch?.population > highestPopulation) {\n      dominant = swatch\n    }\n  }\n\n  return dominant\n}\n\nexport default {\n  getColors: async (src: string, config: Config): Promise<WebImageColors> => {\n    const { fallback } = config\n\n    const img = new Image()\n    img.src = src\n    img.crossOrigin = 'Anonymous'\n\n    const vibrant = new Vibrant(img, {\n      useWorker: true,\n      quality: getQuality(config.quality),\n    })\n\n    const palette = await vibrant.getPalette()\n\n    return {\n      dominant: getDominantSwatch(palette)?.hex ?? fallback,\n      vibrant: palette.Vibrant?.hex ?? fallback,\n      darkVibrant: palette.DarkVibrant?.hex ?? fallback,\n      lightVibrant: palette.LightVibrant?.hex ?? fallback,\n      darkMuted: palette.DarkMuted?.hex ?? fallback,\n      lightMuted: palette.LightMuted?.hex ?? fallback,\n      muted: palette.Muted?.hex ?? fallback,\n      platform: 'web',\n    }\n  },\n}\n"]}