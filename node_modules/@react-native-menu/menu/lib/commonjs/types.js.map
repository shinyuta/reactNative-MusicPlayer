{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type {\n  ColorValue,\n  processColor,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport type * as React from 'react';\n\nexport type NativeActionEvent = {\n  nativeEvent: {\n    event: string;\n  };\n};\n\ntype MenuAttributes = {\n  /**\n   * An attribute indicating the destructive style.\n   */\n  destructive?: boolean;\n  /**\n   * An attribute indicating the disabled style.\n   */\n  disabled?: boolean;\n  /**\n   * An attribute indicating the hidden style.\n   */\n  hidden?: boolean;\n};\n\n/**\n * The state of the action.\n * - off: A constant indicating the menu element is in the “off” state.\n * - on: A constant indicating the menu element is in the “on” state.\n * - mixed: A constant indicating the menu element is in the “mixed” state.\n */\ntype MenuState = 'off' | 'on' | 'mixed';\n\nexport type MenuAction = {\n  /**\n   * Identifier of the menu action.\n   * The value set in this id will be returned when menu is selected.\n   */\n  id?: string;\n  /**\n   * The action's title.\n   */\n  title: string;\n  /**\n   * (Android only)\n   * The action's title color.\n   * @platform Android\n   */\n  titleColor?: number | ColorValue;\n  /**\n   * (iOS14+ only)\n   * An elaborated title that explains the purpose of the action.\n   * @platform iOS\n   */\n  subtitle?: string;\n  /**\n   * The attributes indicating the style of the action.\n   */\n  attributes?: MenuAttributes;\n  /**\n   * (iOS14+ only)\n   * The state of the action.\n   * @platform iOS\n   */\n  state?: MenuState;\n  /**\n   * (Android and iOS13+ only)\n   * - The action's image.\n   * - Allows icon name included in project or system (Android) resources drawables and\n   * in SF Symbol (iOS)\n   * @example // (iOS)\n   * image=\"plus\"\n   * @example // (Android)\n   * image=\"ic_menu_add\"\n   * - TODO: Allow images other than those included in SF Symbol and resources drawables\n   */\n  image?: string;\n  /**\n   * (Android and iOS13+ only)\n   * - The action's image color.\n   */\n  imageColor?: number | ColorValue;\n  /**\n   * (Android and iOS14+ only)\n   * - Actions to be displayed in the sub menu\n   * - On Android it does not support nesting next sub menus in sub menu item\n   */\n  subactions?: MenuAction[];\n  /**\n   * Whether subactions should be inline (separated by divider) or nested (sub menu)\n   */\n  displayInline?: boolean;\n};\n\ntype MenuComponentPropsBase = {\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Callback function that will be called when selecting a menu item.\n   * It will contain id of the given action.\n   */\n  onPressAction?: ({ nativeEvent }: NativeActionEvent) => void;\n  /**\n   * Actions to be displayed in the menu.\n   */\n  actions: MenuAction[];\n  /**\n   * The title of the menu.\n   */\n  title?: string;\n  /**\n   * (Android API 23+)\n   * Boolean value determines whether popup menu should be anchored\n   * to right corner of parent view - default value is `false`\n   * @platform Android\n   */\n  isAnchoredToRight?: boolean;\n  /**\n   * Determines if menu should open after long press or on normal press\n   *\n   * @default false\n   */\n  shouldOpenOnLongPress?: boolean;\n  /**\n   * Overrides theme variant of menu to light mode, dark mode or system theme\n   * (Only support iOS for now)\n   *\n   * @platform iOS\n   */\n  themeVariant?: string;\n};\n\nexport type MenuComponentProps =\n  React.PropsWithChildren<MenuComponentPropsBase>;\n\nexport type ProcessedMenuAction = Omit<\n  MenuAction,\n  'imageColor' | 'titleColor' | 'subactions'\n> & {\n  imageColor: ReturnType<typeof processColor>;\n  titleColor: ReturnType<typeof processColor>;\n  subactions?: ProcessedMenuAction[];\n};\n\nexport type NativeMenuComponentProps = {\n  style?: StyleProp<ViewStyle>;\n  onPressAction?: ({ nativeEvent }: NativeActionEvent) => void;\n  actions: ProcessedMenuAction[];\n  title?: string;\n};\n"],"mappings":""}